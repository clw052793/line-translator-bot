# app.py
import os
import re
import json
import string
import logging
from io import StringIO
from dotenv import load_dotenv

from flask import Flask, request
from langdetect import detect, DetectorFactory
from langdetect.lang_detect_exception import LangDetectException

from linebot import LineBotApi, WebhookHandler
from linebot.models import TextMessage, MessageEvent

from deep_translator import GoogleTranslator

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- Load .env ---
load_dotenv()

# --- Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Flask & LINE Setup ---
app = Flask(__name__)
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    logger.warning("LINE channel token/secret not set. Make sure LINE_CHANNEL_ACCESS_TOKEN and LINE_CHANNEL_SECRET are set in .env")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN) if LINE_CHANNEL_ACCESS_TOKEN else None
handler = WebhookHandler(LINE_CHANNEL_SECRET) if LINE_CHANNEL_SECRET else None

# --- Langdetect seed for determinism ---
DetectorFactory.seed = 0

# --- Google Sheets Setup (supports JSON content or file path) ---
sheet = None
GOOGLE_SHEET_KEY = os.getenv("GOOGLE_SHEET_KEY")
GOOGLE_SHEET_JSON = os.getenv("GOOGLE_SHEET_JSON")

if GOOGLE_SHEET_KEY and GOOGLE_SHEET_JSON:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    try:
        try:
            # first try parse as JSON content
            creds_data = json.loads(GOOGLE_SHEET_JSON)
            creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_data, scope)
            logger.info("Loaded Google credentials from JSON content in env.")
        except json.JSONDecodeError:
            # fallback to treat as file path
            creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEET_JSON, scope)
            logger.info("Loaded Google credentials from file path.")
        gc = gspread.authorize(creds)
        sheet = gc.open_by_key(GOOGLE_SHEET_KEY).sheet1
        logger.info("‚úÖ Google Sheets connected.")
    except Exception as e:
        logger.exception("Failed to initialize Google Sheets: %s", e)

# --- DICTIONARIES (you provided these; included here) ---
indonesian_abbreviation_map = {
    # üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‰∫∫Á®±ËàáÁ®±Ë¨Ç
    "ad": "ÂºüÂºü",
    "adik": "ÂºüÂºü",
    "kak": "Âì•Âì•",
    "ce": "ÂßêÂßê",
    "cece": "ÂßêÂßê",
    "ibu": "Â™ΩÂ™Ω",
    "bpk": "ÂÖàÁîü",
    "ayah": "Áà∏Áà∏",
    "nenek": "Â•∂Â•∂",
    "kakek": "Áà∫Áà∫",
    "cucu": "Â≠´Â≠ê",
    "tmn": "ÊúãÂèã",
    "tm": "‰ªñÂÄë",
    "sy": "Êàë",
    "aku": "Êàë",
    "saya": "Êàë",
    "kmu": "‰Ω†",
    "km": "‰Ω†",
    "anda": "ÊÇ®",
    "dy": "‰ªñ/Â•π",
    "dia": "‰ªñ/Â•π",
    "dya": "‰ªñ/Â•π",

    # üïê ÊôÇÈñìËàáÊó•Êúü
    "pagi": "Êó©‰∏ä",
    "siang": "‰∏≠Âçà",
    "sore": "‰∏ãÂçà",
    "malam": "Êôö‰∏ä",
    "bsk": "ÊòéÂ§©",
    "besok": "ÊòéÂ§©",
    "kmrn": "Êò®Â§©",
    "kemarin": "Êò®Â§©",
    "td": "ÂâõÊâç",
    "tdi": "ÂâõÊâç",
    "nanti": "Á≠â‰∏Ä‰∏ã",
    "udh": "Â∑≤Á∂ì",
    "sudah": "Â∑≤Á∂ì",
    "blm": "ÈÇÑÊ≤í",
    "belum": "ÈÇÑÊ≤í",
    "hr": "ÂÅáÊúü",
    "hari": "Â§©",
    "jam": "pukul",
    "pagi2": "Êó©‰∏äÊó©Èªû",
    "siang2": "‰∏≠ÂçàÊôÇÂÄô",

    # üç± ÁÖßË≠∑ËàáÁîüÊ¥ªÂãï‰Ωú
    "makan": "ÂêÉ",
    "mkn": "ÂêÉ",
    "minum": "Âñù",
    "mandi": "Ê¥óÊæ°",
    "mandikan": "Âπ´Ê¥óÊæ°",
    "ganti": "Êèõ",
    "tidur": "Áù°Ë¶∫",
    "t": "tidur",
    "bangun": "Ëµ∑Â∫ä",
    "temani": "Èô™",
    "pulang": "ÂõûÂÆ∂",
    "bantu": "Âπ´Âøô",
    "rehabilitas": "Âæ©ÂÅ•",
    "bersih": "ÊâìÊéÉ",
    "cuci": "Ê¥ó",
    "masak": "ÁÖÆ",
    "masaknya": "ÁÖÆÁöÑ",
    "masukan": "ÊîæÈÄ≤",
    "potong": "Âàá",
    "lihat": "ÁúãË¶ã",
    "lihat2": "ÁúãÁúã",
    "pegang": "ÊãøËëó",
    "tutup": "Èóú‰∏ä",
    "buka": "ÊâìÈñã",

    # üí¨ ËÅäÂ§©Âè£Ë™ûÁ∏ÆÂØ´
    "aj": "aja",
    "ajh": "aja",
    "aja": "Â∞±Â•Ω",
    "deh": "Â∞±ÈÄôÊ®£Âêß",
    "bwt": "buat",
    "buat": "ÁÇ∫‰∫Ü",
    "jg": "juga",
    "jgk": "juga",
    "jga": "juga",
    "jdi": "jadi",
    "jd": "jadi",
    "kl": "kalau",
    "klw": "kalau",
    "klo": "kalau",
    "krn": "karena",
    "karna": "karena",
    "iya": "ya",
    "lya": "ya",
    "yaudah": "Â•ΩÂï¶",
    "ywdh": "Â•ΩÂï¶",
    "ngga": "‰∏ç",
    "ga": "‰∏ç",
    "gk": "‰∏ç",
    "nggak": "‰∏ç",
    "nggaaa": "‰∏ç",
    "gt": "gitu",
    "gtu": "gitu",
    "gitu": "ÈÇ£Ê®£",
    "gtw": "‰∏çÁü•ÈÅì",
    "sm": "sama",
    "sm2": "sama-sama",
    "trs": "terus",
    "trus": "terus",
    "sja": "saja",
    "sllu": "selalu",
    "skrg": "ÁèæÂú®",
    "dr": "ÈÜ´Áîü",
    "dok": "ÈÜ´Áîü",
    "tp": "tapi",
    "tpi": "tapi",
    "tapi": "‰ΩÜÊòØ",
    "ok": "Â•Ω",
    "okee": "Â•ΩÂñî",
    "okey": "Â•ΩÂñî",
    "sip": "Â•Ω",
    "mantap": "Â§™Ê£í‰∫Ü",
    "btw": "È†Ü‰æøË™™‰∏Ä‰∏ã",

    # üè† Áâ©‰ª∂ËàáÂú∞Èªû
    "rumah": "ÂÆ∂",
    "rmh": "ÂÆ∂",
    "pintu": "ÈñÄÂè£",
    "dpn": "ÂâçÈù¢",
    "belakang": "ÂæåÈù¢",
    "mobil": "Ëªä",
    "motor": "Êë©ÊâòËªä",
    "uang": "Èå¢",
    "sayur": "Ëî¨Ëèú",
    "beras": "Á±≥",
    "air": "Ê∞¥",
    "kursi": "Ê§ÖÂ≠ê",
    "meja": "Ê°åÂ≠ê",
    "dapur": "ÂªöÊàø",
    "kamar": "ÊàøÈñì",
    "tempat tidur": "Â∫ä",
    "jendela": "Á™óÊà∂",
    "halaman": "Èô¢Â≠ê",

    # üßæ Â∑•‰Ωú„ÄÅÂñÆ‰ΩçËàáÂ≠∏Ê†°
    "bca": "ÈäÄË°å",
    "pt": "ÊúâÈôêÂÖ¨Âè∏",
    "sd": "Â∞èÂ≠∏",
    "smp": "Âàù‰∏≠",
    "smk": "‰∏≠Á≠âËÅ∑Ê•≠Â≠∏Ê†°",
    "tk": "ÂπºÂÖíÂúí",
    "rt": "Â±ÖÊ∞ëÁ§æÂçÄ",
    "rw": "Á§æÂçÄÁØÑÂúç",
    "kkn": "Á§æÊúÉÊúçÂãô",
    "tni": "Âç∞Â∫¶Â∞ºË•ø‰∫ûÂúãËªç",
    "polri": "Âç∞Â∫¶Â∞ºË•ø‰∫ûË≠¶ÂØü",
    "wfh": "Âú®ÂÆ∂Â∑•‰Ωú",
    "wfo": "Ëæ¶ÂÖ¨ÂÆ§Â∑•‰Ωú",
    "umkm": "ÂæÆÂûã‰ºÅÊ•≠",
    "wmm": "ÂæÆÂûã‰ºÅÊ•≠",

    # üß† ÂÖ∂‰ªñË£úÂÖÖ
    "faq": "Â∏∏Ë¶ãÂïèÈ°å",
    "bkn": "‰∏çÊòØ",
    "bsa": "bisa",
    "bisa": "ÂèØ‰ª•",
    "saja": "Â∞±Â•Ω",
    "karena": "Âõ†ÁÇ∫",
    "krg": "Â∞ë",
    "susa": "susah",
    "habis": "ÂêÉÂÆå",
    "selesai": "ÁµêÊùü",
    "sayang": "Ë¶™ÊÑõÁöÑ",
    "syg": "Ë¶™ÊÑõÁöÑ",
    "gpp": "Ê≤íÈóú‰øÇ",
    "nd": "‰∏ãÂ±¨",
    "orang": "‰∫∫",
    "wkwk": "ÂìàÂìà",
    "haha": "ÂìàÂìà",
    "hehe": "ÂëµÂëµ",
    "loh": "ÂëÄ",
    "lah": "Âï¶",
    "nih": "ÈÄôÂÄã",
    "dong": "Âï¶",
    "kok": "ÊÄéÈ∫ºÊúÉ",
    "lohkok": "ÊÄéÈ∫ºÂï¶",
    "lho": "Âë¢",
    "dehh": "Â∞±ÈÄôÊ®£Âêß",
    "bt": "ÁîüÊ∞£",
    "pd": "Ëá™‰ø°",
    "pls": "Ë´ã",
    "thx": "Ë¨ùË¨ù",
    "makasih": "Ë¨ùË¨ù",
    "terima kasih": "Ë¨ùË¨ù",
    "okelah": "Â•ΩÂêß",
    "gapapa": "Ê≤í‰∫ã",
    "okeeh": "Â•ΩÂñî",
    "mantul": "ÂæàÊ£í"
}

chinese_indonesian_vocab = {
    "Â•∂Â•∂": "nenek",
    "ÁôΩÂ§©": "siang hari",
    "Êúâ": "ada",
    "Êéí‰æø": "buang air besar",
    "Â§ö": "banyak",
    "ÂæàÂ∞ë": "sangat sedikit",
    "Âè™Êúâ": "hanya",
    "‰∏ÄÈªûÈªû": "sedikit",
    "Â•Ω": "bagus",
    "ÂßêÂßê": "ce",
    "ÂêÉ": "makan",
    "Ê∞¥Êûú": "buah",
    "Âàá": "potong",
    "Â∞è": "kecil",
    "ÂèØ‰ª•": "bisa",
    "ÂêÉ‰∏ã": "dapat dimakan",
    "Êú®Áìú": "pepaya",
    "ÁâõÂ•∂": "susu",
    "Êó•Êúü": "tanggal",
    "Âñù": "minum",
    "ÁÖÆ": "masak",
    "ÁßãËëµ": "okra",
    "ÁÜü": "matang",
    "Âπ´": "bantu",
    "Êãç": "ambil foto",
    "ÈçãÂ≠ê": "pot",
    "Ê¥ó": "cuci",
    "ÁõÜÂ≠ê": "baskom",
    "Áì¶ÊñØÁàê": "kompor gas",
    "Â∏É": "kain",
    "‰∏ãÂçà": "sore",
    "ÁÜ±": "panas",
    "ÊôöÈ§ê": "makan malam",
    "ÂÜ∞": "dingin",
    "Ëí∏ÁÜü": "dikukus",
    "È†ÜÂ∫è": "urutan",
    "ÂçàÈ§ê": "makan siang",
    "Âç°Áâá": "kartu",
    "BPJS": "BPJS",
    "ÂÅ•‰øùÂç°": "kartu asuransi kesehatan",
    "ÂøòË®ò": "lupa",
    "Â∏∂ÂõûÂÆ∂": "membawa pulang",
    "Êõ¥Êñ∞": "diperbarui",
    "ÊèõÊñ∞ÂñÆ": "ubah pesanan baru",
    "Âø´": "cepat",
    "Âõû‰æÜ": "kembali",
    "ËìÆÈúß": "apel lilin",
    "ÂÜ∞ÁÆ±": "lemari es",
    "ÂÆ¢Âª≥": "ruang tamu",
    "Ê°åÂ≠ê": "meja",
    "Á¥Ö": "merah",
    "Êï¨Êãú": "ibadah",
    "Á•àÁ¶±": "berdoa",
    "Âïè": "tanya",
    "ÊåâÊë©": "pijat",
    "Ë≤ì": "kucing",
    "È¢±È¢®": "topan",
    "Ê≥®ÊÑè": "hati-hati",
    "Â§ßËÅ≤": "keras",
    "Ëó•": "obat",
    "Â±ÅËÇ°": "pantat",
    "ÁãÄÊ≥Å": "situasi",
    "Â°ûÂäë": "agen plugging",
    "Ê∞¥": "air",
    "ÈñãÊ∞¥": "air rebus",
    "‰∏ãÂ§ßÈõ®": "hujan deras",
    "Èõ®ÂÅú": "hujan berhenti",
    "Ê®ì‰∏ä": "lantai atas",
    "Â§ñÈù¢": "luar",
    "Êãø": "ambil",
    "Ê∞¥ÊûúÂâù": "kupas buah",
    "ÊêçÂ£û": "rusak",
    "Ê¢®Â≠ê": "pir",
    "È¶ôÁìú": "melon",
    "ÂúìÂΩ¢": "bulat",
    "ÂêÉÂÆå": "habis",
    "Èªë": "hitam",
    "Á¥ÖËè†Ëèú": "bayam merah",
    "ÂØÑ": "kirim",
    "ÁÆ±": "kotak",
    "ÈÄÅ": "antar",
    "‰ªäÂ§©": "hari ini",
    "ÊòéÂ§©": "besok",
    "Á∞ΩÊî∂": "tanda tangan",
    "‰∏äÊ¨°": "terakhir",
    "Â§ñÁÆ±": "kotak luar",
    "Á≤âÁ¥ÖËâ≤": "merah muda",
    "‰∏ãÈù¢": "di bawah",
    "ÈÇÑÊ≤í": "belum",
    "ÈÅµÂæ™": "mengikuti",
    "Êó•ÊúüÈ†ÜÂ∫è": "urutan tanggal",
}

# ‰∏≠ÊñáÊΩ§È£æÂ∞çÁÖßÔºàÂèØÊì¥ÂÖÖÔºâ
chinese_polish_map = {
    "Ë¨ùË¨ù‰Ω†": "Ë¨ùË¨ù„ÄÇ",
    "Â•ΩÁöÑ": "Â•Ω„ÄÇ",
    "ok": "Â•Ω„ÄÇ"
}

# --- Utility functions ---

def save_to_sheet(original, translated):
    if sheet:
        try:
            sheet.append_row([original, translated])
        except Exception as e:
            logger.exception("Error writing to Google Sheets: %s", e)

def expand_abbreviations(text: str) -> str:
    # ÂÖàÂÅö word-boundary Âèñ‰ª£ÔºàÂøΩÁï•Â§ßÂ∞èÂØ´Ôºâ
    # ÁÇ∫ÈÅøÂÖçÂ∞á longer tokens Ë¢´ shorter tokens ÊìãÊéâÔºåÊéíÂ∫èÈï∑Â∫¶ÈÅûÊ∏õÊõøÊèõ
    keys_sorted = sorted(indonesian_abbreviation_map.keys(), key=lambda k: -len(k))
    for abbr in keys_sorted:
        full = indonesian_abbreviation_map[abbr]
        text = re.sub(r'\b' + re.escape(abbr) + r'\b', full, text, flags=re.IGNORECASE)
    return text

def polish_chinese(text: str) -> str:
    for k, v in chinese_polish_map.items():
        text = text.replace(k, v)
    if not re.search(r'[„ÄÇÔºÅÔºü]$', text):
        text = text.strip() + "„ÄÇ"
    return text

def detect_language(text: str):
    # Áî®‰∏≠ÊñáÂ≠óÂÖÉËàáÊãâ‰∏ÅÂ≠óÂÖÉÊØî‰æã‰æÜÂÑ™ÂÖàÂà§Êñ∑
    chinese_chars = sum(1 for c in text if '\u4e00' <= c <= '\u9fff')
    latin_chars = sum(1 for c in text if c.isalpha() and c.lower() in string.ascii_lowercase)
    logger.debug("chinese_chars=%d latin_chars=%d", chinese_chars, latin_chars)

    if chinese_chars > latin_chars:
        return 'chinese', text
    elif latin_chars > chinese_chars:
        return 'indonesian', text
    else:
        # fallback to langdetect
        try:
            detected = detect(text)
            return detected, text
        except LangDetectException:
            return None, text

def convert_jam_to_hhmm(text: str) -> str:
    """
    Convert patterns like:
      - jam 9, jam9, jam 9.5, jam 9:30, jam 12.35
      - jam 3 sore / jam 6 pagi / jam 7 malam
    into consistent HH:MM 24-hour format or preserve readable '‰∏ãÂçà9:00' depending on strategy.
    We'll output HH:MM (24h) for clarity (e.g., jam 3 sore -> 15:00).
    """
    def hour_min_to_24(hour_int: int, minute_int: int, period: str = None):
        # period could be 'pagi', 'siang', 'sore', 'malam', 'a.m.', 'p.m.' etc.
        if period:
            p = period.lower()
            if p in ('sore', 'malam', 'p.m.', 'pm'):
                if hour_int < 12:
                    hour_int = hour_int + 12
            if p in ('pagi', 'a.m.', 'am'):
                if hour_int == 12:
                    hour_int = 0
            # 'siang'‰∏ÄËà¨Ë¶ñÁÇ∫12:00-15:00Ôºå‰øùÊåÅÂéüÊú¨Êï∏Â≠óÔºàËã•ÈúÄË¶ÅÈÄ≤‰∏ÄÊ≠•ËôïÁêÜÂèØÊì¥ÂÖÖÔºâ
        # bound hour
        hour_int = hour_int % 24
        return f"{hour_int:02d}:{minute_int:02d}"

    # ÂÖàËôïÁêÜÂ∏∂ period ÁöÑÂΩ¢ÂºèÔºö jam 3 sore / jam 3 pagi
    pattern_period = re.compile(r'\bjam\s*(\d{1,2})(?:[:.,]\s*(\d{1,2}|\d{1,2}\.\d+))?\s*(pagi|siang|sore|malam|a\.m\.|p\.m\.|am|pm)\b', flags=re.IGNORECASE)
    def repl_period(m):
        h = int(m.group(1))
        min_part = m.group(2)
        period = m.group(3)
        minute = 0
        if min_part:
            if '.' in min_part:
                try:
                    minute = round(float("0." + min_part.split('.')[-1]) * 60)
                except:
                    minute = int(float(min_part))
            else:
                minute = int(min_part)
        return hour_min_to_24(h, minute, period)
    text = pattern_period.sub(repl_period, text)

    # ËôïÁêÜÂê´Â∞èÊï∏ÁöÑ like jam 9.5 or jam 9.25 (9.5 -> 9:30)
    pattern_decimal = re.compile(r'\bjam\s*(\d{1,2})\s*[:.,]?\s*(\d*\.\d+)\b', flags=re.IGNORECASE)
    def repl_decimal(m):
        h = int(m.group(1))
        dec = float(m.group(2))
        minute = int(round(dec * 60))
        return hour_min_to_24(h, minute)
    text = pattern_decimal.sub(repl_decimal, text)

    # ËôïÁêÜÊ®ôÊ∫ñ jam H[:MM]
    pattern_basic = re.compile(r'\bjam\s*(\d{1,2})(?:[:.,]\s*(\d{1,2}))?\b', flags=re.IGNORECASE)
    def repl_basic(m):
        h = int(m.group(1))
        min_part = m.group(2)
        minute = int(min_part) if min_part and min_part.isdigit() else 0
        return hour_min_to_24(h, minute)
    text = pattern_basic.sub(repl_basic, text)

    return text

def preprocess_text(text: str, lang: str) -> str:
    if lang == 'indonesian':
        # expand some chinese-style time like "12Èªû30" -> "12:30" if present in imported text
        text = re.sub(r'(\d{1,2})Èªû(\d{1,2})', r'\1:\2', text)
        text = re.sub(r'(\d{1,2})Èªû', r'\1:00', text)
        # normalize "jam ..." to HH:MM 24h
        text = convert_jam_to_hhmm(text)
    return text

def translate_text(text: str, source: str, target: str) -> str:
    try:
        return GoogleTranslator(source=source, target=target).translate(text)
    except Exception as e:
        logger.exception("Translation error: %s", e)
        return "‚ö†Ô∏è ÁøªË≠ØÂ§±Êïó"

# --- Main processing pipeline ---

def process_message(text: str) -> str:
    text = text.strip()
    if not text or all(ch in string.punctuation for ch in text):
        return "‚ö†Ô∏è Ë´ãËº∏ÂÖ•ÊúâÊïàÊñáÂ≠ó"

    lang, cleaned = detect_language(text)
    logger.info("Detected language: %s | Text: %s", lang, cleaned)

    if not lang:
        return "‚ö†Ô∏è ÁÑ°Ê≥ïÂÅµÊ∏¨Ë™ûË®Ä"

    # handle Indonesian input
    if lang == 'indonesian' or lang.startswith('id'):
        # expand abbreviations then preprocess (time convert etc)
        expanded = expand_abbreviations(cleaned.lower())
        preprocessed = preprocess_text(expanded, 'indonesian')
        translated = translate_text(preprocessed, source='id', target='zh-TW')
        polished = polish_chinese(translated)
        save_to_sheet(text, polished)
        return f"üó£Ô∏è ÁøªË≠ØÁµêÊûúÔºö{polished}"

    # handle Chinese input
    elif lang == 'chinese' or lang.startswith('zh'):
        # polish Chinese then translate to Indonesian
        polished_input = polish_chinese(cleaned)
        # optionally translate dictionary replacements first for short phrases (we keep general translate)
        translated = translate_text(polished_input, source='zh-TW', target='id')
        save_to_sheet(text, translated)
        return f"üó£Ô∏è ÁøªË≠ØÁµêÊûúÔºö{translated}"

    # fallback: if langdetect gives 'en' or others, try translate to both?
    else:
        # we'll only handle chinese and indonesian explicitly
        return "‚ö†Ô∏è ÂÉÖÊîØÊè¥‰∏≠ÊñáËàáÂç∞Â∞ºÊñá"

# --- LINE Webhook handlers ---
@app.route("/callback", methods=["POST"])
def callback():
    # signature may not exist in testing env
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    if handler:
        try:
            handler.handle(body, signature)
        except Exception as e:
            logger.exception("Error handling LINE webhook: %s", e)
            # Don't disclose internals to LINE
    else:
        logger.warning("LINE handler not configured.")
    return "OK", 200

@app.route("/ping", methods=["GET"])
def ping():
    return "pong", 200

if handler:
    @handler.add(MessageEvent)
    def handle_message(event):
        try:
            # only care text messages
            from linebot.models import TextMessage as LineTextMessage
            if isinstance(event.message, LineTextMessage):
                user_message = event.message.text
                reply = process_message(user_message)
                if line_bot_api:
                    line_bot_api.reply_message(event.reply_token, TextMessage(text=reply))
                else:
                    logger.warning("LINE API not configured; cannot reply.")
        except Exception as e:
            logger.exception("Error in handle_message: %s", e)

# --- Run app ---
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    host = os.getenv("HOST", "0.0.0.0")
    logger.info("Starting app on %s:%d", host, port)
    app.run(host=host, port=port)
